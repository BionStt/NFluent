<#+ 
/// <summary>
/// Provides a way to clone an existing generic type into other ones with different type params.
/// </summary>
public static class TypeCloningHelper
{
	public static string GenerateSourceCode(string goldenSourceClassFileName, string assertionClassName, string targetTypeName)
    {
		// Retrieves the class to use as the golden source for all numbers
		StringBuilder sb = new StringBuilder();
		using (StreamReader sr = new StreamReader(goldenSourceClassFileName)) 
		{
			string line;
			// Read and display lines from the file until the end of 
			// the file is reached.
			while ((line = sr.ReadLine()) != null) 
			{
				line = line.Replace("internal static string doNotChangeOrRemoveThisLine = Constants.AutoGeneratedNumberClassDisclaimerPlaceHolder;", "// ---------------------- WARNING ----------------------\n        // auto-generated file which should not be modified.\n        // To change this class, change the one that is used\n        // as the golden source/model for this autogeneration\n        // (i.e. the one dedicated to the integer values).\n        // -----------------------------------------------------");
				line = line.Replace("IntFluentAssertionExtensions", assertionClassName);
				line = line.Replace("<int>", "<" + targetTypeName + ">");
				line = line.Replace("int ", targetTypeName + " ");
				line = line.Replace("on an integer value", "on a " + targetTypeName + " value");
				sb.AppendLine(line);
			}
		}
		
		return sb.ToString();
    }
}

#>