<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ output extension="cs" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<#
    // --------------------------------------------------------------------------------------------------------------------
    // <copyright file="NumberFluentAssertionExtensionsScript.tt" company="">
    //   Copyright 2013 Thomas PIERRAIN
    //   Licensed under the Apache License, Version 2.0 (the "License");
    //   you may not use this file except in compliance with the License.
    //   You may obtain a copy of the License at
    //       http://www.apache.org/licenses/LICENSE-2.0
    //   Unless required by applicable law or agreed to in writing, software
    //   distributed under the License is distributed on an "AS IS" BASIS,
    //   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    //   See the License for the specific language governing permissions and
    //   limitations under the License.
    // </copyright>
    // --------------------------------------------------------------------------------------------------------------------
	
	// uses the method http://t4-editor.tangible-engineering.com/blog/how-to-generate-multiple-output-files-from-a-single-t4-template.html#Part1
 
	IServiceProvider hostServiceProvider = (IServiceProvider)Host;
	EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
	var manager = TemplateFileManager.Create(this);

	string projects = string.Empty;
	foreach(Project project in dte.Solution.Projects)
    {
		projects += project.Name.ToString();
		projects += " ";
    }

	var numberTypes = new Type[] { typeof(long), typeof(double), typeof(float) };

	foreach(Type type in numberTypes)
    {
		// Creates new output file
		string assertionClassName = type.Name.ToString() + "Assertion";
		manager.StartNewFile(assertionClassName+".cs");
#>
namespace NFluent
{
    internal static class <#= assertionClassName #>
    {
        internal static string GetNumberType()
        {
            return "<#= assertionClassName #>";
        }
    }
}
<#
    }
	
	// Write output code into multiple files
	manager.Process();
 #>