<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="build.tasks" />

  <PropertyGroup>
    <Configuration Condition="$(Configuration) == ''">Debug</Configuration>
    <AssemblyFileNameRoot>$(SolutionRoot)\$(SolutionName)</AssemblyFileNameRoot>

    <PackageStream>alpha</PackageStream>
    <ArtifactsPath>$(SolutionRoot)\Artifacts</ArtifactsPath>
    <BinariesPath>$(ArtifactsPath)\Binaries</BinariesPath>
    <PackagesPath>$(SolutionRoot)\Packages</PackagesPath>
    <DocPath>$(SolutionRoot)\Docs</DocPath>
    
    <NuGetToolsPath>$(PackagesPath)</NuGetToolsPath>
    <NuGetExePath>nuget.exe</NuGetExePath>
    <TestRunnerPath>$(NuGetToolsPath)\NUnit.ConsoleRunner.3.7.0\tools\nunit3-console.exe</TestRunnerPath>
    <MsTestRunnerPath>$(MSBuildProgramFiles32)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\TestWindow\</MsTestRunnerPath>
    <MsTestRunner>vstest.console.exe</MsTestRunner>
  </PropertyGroup>

  <!-- Specifics for appveyor: use env provided nunit runner for result publication-->
  <Choose>
    <When Condition="'$(APPVEYOR)'=='True'">
      <PropertyGroup>
        <NunitOptions>--result="$(SolutionRoot)\TestResults.xml";format=AppVeyor</NunitOptions>
        <TestRunnerPath>nunit3-console.exe</TestRunnerPath>
        <MsTestRunnerPath></MsTestRunnerPath>
      </PropertyGroup>
    </When>
  </Choose>

  <Target Name="RunAll" DependsOnTargets="Build; RunTests; Package" />
  <Target Name="CI" DependsOnTargets="RunAll; CoverageReport" />
  <Target Name="Push" DependsOnTargets="CI; Publish"/>
  <Target Name="Beta" DependsOnTargets="SetBeta; Push" />
  <Target Name="Nightly" DependsOnTargets="SetNightly; Push"/>
  <Target Name="Alpha" DependsOnTargets="SetAlpha; Push"/>
  <Target Name="RC" DependsOnTargets="SetRC; RunAll; Push"/>
  <Target Name="Release" DependsOnTargets="SetRelease; Push"/>
  <Target Name="DebugBuild" DependsOnTargets="Package"/>

  <!--Targets-->
  <Target Name="SetNightly">
    <PropertyGroup>
      <PackageStream>nightly</PackageStream>
    </PropertyGroup>
  </Target>
  <Target Name="SetRC">
    <PropertyGroup>
      <PackageStream>RC</PackageStream>
    </PropertyGroup>
  </Target>
  <Target Name="SetRelease">
    <PropertyGroup>
      <PackageStream></PackageStream>
    </PropertyGroup>
  </Target>
  <Target Name="SetAlpha">
    <PropertyGroup>
      <PackageStream>alpha</PackageStream>
    </PropertyGroup>
  </Target>
  <Target Name="SetBeta">
    <PropertyGroup>
      <PackageStream>beta</PackageStream>
    </PropertyGroup>
  </Target>

  <Target Name="SynchroVersion">
    <!-- Ensure version number is propagated in new CsProj format file-->
    <!-- Capture version number -->
    <PropertyGroup>
      <In>$([System.IO.File]::ReadAllText('$(AttributeVersionFile)'))</In>
      <Pattern>\[assembly: AssemblyVersion\("(?&lt;Major&gt;\d+)\.(?&lt;Minor&gt;\d+)\.(?&lt;Patch&gt;[\d]+)\.(?&lt;PreReleaseInfo&gt;[0-9A-Za-z-.]+)?</Pattern>
      <AssemblyVersionMajor>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Major"].Value)</AssemblyVersionMajor>
      <AssemblyVersionMinor>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Minor"].Value)</AssemblyVersionMinor>
      <AssemblyVersionPatch>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["Patch"].Value)</AssemblyVersionPatch>
      <AssemblyVersionPreRelease>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups["PreReleaseInfo"].Value)</AssemblyVersionPreRelease>
      <NumericalVersion>$(AssemblyVersionMajor).$(AssemblyVersionMinor).$(AssemblyVersionPatch).$(AssemblyVersionPreRelease)</NumericalVersion>
    </PropertyGroup>

    <VersionBuilding version ="$(NumericalVersion)" stream="$(PackageStream)">
      <Output PropertyName="PrettyVersion" TaskParameter="fullVersion" />
    </VersionBuilding>
    <Message Importance="high" Text="Pretty Version= $(PrettyVersion)" />

    <ItemGroup>
      <CSProjToPatch Include="@(ProjectFolder)" Condition="'%(ProjectFolder.Fwk)'=='core'">
        <FullName>%(ProjectFolder.FullPath)\%(ProjectFolder.CsProj)</FullName>
      </CSProjToPatch>
    </ItemGroup>
    <Message Importance="high" Text="--------- VERSION NUMBER SYNCHRO  -------------------------------------"/>
    <Message Text="Version : $(NumericalVersion)"/>
    <Message Text="Informal Version : $(PrettyVersion)"/>
    <Message Importance="high" Text="Patching versions in %(CSProjToPatch.FullName) to $(PrettyVersion)"/>
    <XmlPoke
      XmlInputPath="%(CSProjToPatch.FullName)"
      Query="//AssemblyVersion" 
      Value="$(NumericalVersion)" />
    <XmlPoke
      XmlInputPath="%(CSProjToPatch.FullName)"
      Query="//FileVersion" 
      Value="$(NumericalVersion)" />
    <XmlPoke
      XmlInputPath="%(CSProjToPatch.FullName)"
      Query="//Version" 
      Value="$(PrettyVersion)" />
    <XmlPoke
      XmlInputPath="%(CSProjToPatch.FullName)"
      Query="//InformationalVersion" 
      Value="$(PrettyVersion)" />
    <Message Importance="high" Text="--------- end of VERSION NUMBER SYNCHRO  ------------------------------"/>
  </Target>

  <!-- 0- Restore dependencies -->
  <Target Name="NugetRestore" DependsOnTargets="SynchroVersion">
    <ItemGroup>
      <Prj Include="ProjectFolder" Condition="'%(ProjectFolder.Fwk)'=='core'">
        <Title>%(ProjectFolder.FileName)</Title>
        <RestoreCommand>nuget restore %(ProjectFolder.FullPath)\%(ProjectFolder.CsProj) -verbosity quiet</RestoreCommand>
      </Prj>
      <Prj Include="ProjectFolder" Condition="'%(ProjectFolder.Fwk)'!='core'">
        <Title>%(ProjectFolder.FileName)</Title>
        <RestoreCommand>"$(NuGetExePath)" install "%(ProjectFolder.FullPath)\packages.config" -o "$(SolutionRoot)\packages" -verbosity quiet</RestoreCommand>
      </Prj>
    </ItemGroup>

    <Message Importance="high" Text="--------- NUGET RESTORE  -------------------------------------------"/>
    <Message Importance="high" Text="Restoring %(Prj.Title)"/>
    <Exec Command='%(Prj.RestoreCommand)'/>
    <Message Importance="high" Text="--------- end of NUGET RESTORE  -------------------------------------"/>
  </Target>
  
  <!-- 1- Do the BUILD -->
  <Target Name="Build" DependsOnTargets="NugetRestore">
    <Message Importance="high" Text="--------- BUILD  -------------------------------------------"/>
    <Message Importance="high" Text="
---------------------------------------------------------------
BUILD PROJECT with MSBuildToolsVersion: '$(MSBuildToolsVersion)'
---------------------------------------------------------------
      "  />

    <Message Importance="normal" Text="--------- will run: $(SolutionRoot)\$(SolutionName).sln"/>
    <MSBuild Projects="$(SolutionRoot)\$(SolutionName).sln" 
             Targets="Build" 
             Properties="Configuration=$(Configuration)"/>

    <Message Importance="high" Text="--------- end of BUILD  -------------------------------------"/>
  </Target>
    
  <!-- 2- BUILD THE DOCS -->
  <Target Name="BuildDocs">

    <Message Importance="high" Text="--------- DOCUMENTATION GENERATION  ---------"/>
    <Message Importance="high" Text="
---------------------------------------------------------------
GENERATING DOCS for:
  - $(BinariesPath)\$(SolutionName).dll
---------------------------------------------------------------
          "  />
    <MakeDir Directories="$(DocPath)" Condition="!Exists('$(DocPath)')" />
    <Exec Command="$(DocuExePath) $(BinariesPath)\$(SolutionName).dll --output=$(DocPath)" />
    <Exec Command="&quot;$(ZipExe)&quot; a -tzip &quot;$(PackagesPath)\$(SolutionName).docs.zip&quot; &quot;$(DocPath)&quot;" />
    <Message Importance="high" Text="--------- end of DOCUMENTATION GENERATION  ---------"/>
  </Target>

  <!-- 3a- Run the TESTS -->
  <Target Name="RunTests" DependsOnTargets="Build">
    <ItemGroup>
      <TestRun Include="@(TestProjects)" Condition="'%(TestProjects.Framework)'!='netstandard1.3' AND '%(TestProjects.Runner)'==''">
        <Runner>"$(TestRunnerPath)"</Runner>
        <Args>%(TestProjects.FullPath) $(NunitOptions) /framework:%(TestProjects.Framework)</Args>
        <Coverage>%(TestProjects.Coverage)</Coverage>
      </TestRun>
      <TestRun Include="@(TestProjects)" Condition="'%(TestProjects.Framework)'=='netstandard1.3'">
        <Runner>dotnet.exe</Runner>
        <Args>test %(TestProjects.FullPath) -c $(Configuration)</Args>
        <Coverage>%(TestProjects.Coverage)</Coverage>
      </TestRun>
      <TestRun Include="@(TestProjects)" Condition="'%(TestProjects.Framework)'!='netstandard1.3' AND '%(TestProjects.Runner)'=='MsTest'">
        <Runner>"$(MsTestRunnerPath)$(MsTestRunner)"</Runner>
        <Args>%(TestProjects.Identity)</Args>
        <Coverage>%(TestProjects.Coverage)</Coverage>
      </TestRun>
      <TestRun Include="@(TestProjects)" Condition="'%(TestProjects.Runner)'=='Self'">
        <Runner>"%(TestProjects.Identity)"</Runner>
        <Args></Args>
        <Coverage>%(TestProjects.Coverage)</Coverage>
      </TestRun>    </ItemGroup>

    <Message Importance="high" Text="
---------------------------------------------------------------
RUN ALL UNIT TESTS
---------------------------------------------------------------
          "  />

    <Message Importance="high" Text="--------- RUN TESTS ---------"/>
    <Delete Files="$(SolutionRoot)\$(SolutionName)-coverage.xml"/>
    <Exec Command='dotnet --version'/>
    <Exec Command='%(TestRun.Runner) %(TestRun.Args)' LogStandardErrorAsError="true" WorkingDirectory="$(SolutionRoot)"/>
    <Message Importance="high" Text="--------- end of RUN TESTS ---------"/>

    <Message Importance="high" Text="--------- Coverage ---------"/>
    <PropertyGroup>
      <opencoverVersion>4.6.519</opencoverVersion>
      <CoverToolPath>$(NuGetToolsPath)\OpenCover.$(opencoverVersion)\tools</CoverToolPath>
    </PropertyGroup>
    <Exec Command='"$(NuGetExePath)" install opencover -o "$(NuGetToolsPath)" -version $(opencoverVersion)'/>
    <Message Importance="normal" Text="Cover for %(TestProjects.Identity) : $(SolutionRoot)\$(SolutionName)-coverage.xml -mergeoutput " Condition="'%(TestProjects.Coverage)'=='true'"/>
    <Exec Command='"$(CoverToolPath)\OpenCover.Console" -target:%(TestRun.Runner) -register:user -filter:"+[*]* -[*.Tests*]*" -excludebyattribute:*.Obsolete*  -output:"$(SolutionRoot)\$(SolutionName)-coverage.xml" -mergeoutput -mergebyhash -targetargs:"%(TestRun.Args)"'
          Condition="'%(TestRun.Coverage)'=='true'"/>
    <Message Importance="high" Text="--------- end of Coverage ---------"/>
  </Target>
  
  <!-- 3b- Tests coverage -->
  <Target Name="CoverageReport">
    <PropertyGroup>
      <reportGeneratorVersion>3.1.1</reportGeneratorVersion>
      <CoverReportToolPath>$(NuGetToolsPath)\ReportGenerator.$(reportGeneratorVersion)\tools</CoverReportToolPath>
    </PropertyGroup>
    <Exec Command='"$(NuGetExePath)" install reportgenerator -o "$(NuGetToolsPath)" -version $(reportGeneratorVersion)'/>

    <Message Importance="high" Text="--------- Publish Coverage ---------"/>
    <Message Importance="high" Text="Get Tools"/>

    <Exec Command ='"$(CoverReportToolPath)\ReportGenerator.exe" -reports:$(SolutionRoot)\$(SolutionName)-coverage.xml -targetdir:"$(SolutionRoot)\CoverageReport"' Condition="'$(APPVEYOR)'!='True'"/>

    <Exec Command="pip install codecov"/>
    <Exec WorkingDirectory="$(SolutionRoot)" Command='codecov -f "$(SolutionRoot)\$(SolutionName)-coverage.xml" -t $(CodeCovKey) -X gcov -n $(SolutionName)'
           Condition="('$(CodeCovKey)'!='') AND ('$(APPVEYOR)'=='True')"/>
   <Message Importance="high" Text="--------- end of Publish Coverage ---------"/>
  </Target>

 <!-- 4- Then PACKAGE -->
  <Target Name="Package" DependsOnTargets="">

    <Message Importance="high" Text="---------- PACKAGE ---------"/>
    <ItemGroup>
      <FilesForNuget Include="@(ProjectFolder)" Condition="'%(ProjectFolder.Package)'!=''">
        <TargetFwk>%(ProjectFolder.Package)</TargetFwk>
        <SourceDir>%(ProjectFolder.FullPath)\bin\$(Configuration)\*.*</SourceDir>
      </FilesForNuget>
    </ItemGroup>
      <!-- Copies the dll into an easy path targeted by the .nuspec file. -->
      <Message Text="xcopy %(FilesForNuget.SourceDir) $(BinariesPath)\%(FilesForNuget.TargetFwk)\ /E /Y" />
      <Exec Command='xcopy "%(FilesForNuget.SourceDir)" "$(BinariesPath)\%(FilesForNuget.TargetFwk)\" /E /Y /Q' />
    
      <!-- Get the version number of the main FV assembly to insert into the nuspec files -->

      <PropertyGroup>
        <NuspecFilePath>$(SolutionRoot)\$(SolutionName).nuspec</NuspecFilePath>
      </PropertyGroup>

      <Message Importance="high" Text="[Print] PackageVersion: '$(NumericalVersion)'" />
      <Message Importance="high" Text="[Print] NuspecFilePath: '$(NuspecFilePath)'" />

    <!-- insert the version number into the nuspec file -->
      <XmlPoke 
        XmlInputPath="$(NuspecFilePath)"
          Namespaces="&lt;Namespace Prefix='x' Uri='http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd' /&gt;"
        Query="x:package/x:metadata/x:version" 
        Value="$(PrettyVersion)" />

      <!-- Gets the release note content from the proper file -->
      <ReadLinesFromFile File="$(SolutionRoot)\ReleaseNoteContentToBeInsertedWithinNuspecFile.txt">
        <Output TaskParameter="Lines" ItemName="FileContents" />
      </ReadLinesFromFile>
      
      <!-- Sets its content into a variable with n/a as the default value -->
      <PropertyGroup>
        <ReleaseNoteContent>n/a</ReleaseNoteContent>
      </PropertyGroup>

      <PropertyGroup Condition=" '@(FileContents,'%0a%0d')' != '' ">
        <ReleaseNoteContent>@(FileContents,'%0a%0d')</ReleaseNoteContent>
      </PropertyGroup>

      <!-- Updates the nuspec file with this variable content -->
      <XmlPoke
        XmlInputPath="$(NuspecFilePath)"
          Namespaces="&lt;Namespace Prefix='x' Uri='http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd' /&gt;"
        Query="x:package/x:metadata/x:releaseNotes"
        Value="$(ReleaseNoteContent)" />

      <Message Importance="high" Text="
---------------------------------------------------------------
CREATING NUGET PACKAGE IN:
    - $(PackagesPath)
---------------------------------------------------------------
            "  />
      <MakeDir Directories="$(PackagesPath)" Condition="!Exists('$(PackagesPath)')" />
      <Delete Files="$(PackagesPath)\*.*"/>
      <Exec Command='"$(NuGetExePath)" pack "$(NuspecFilePath)" -o "$(PackagesPath)"' LogStandardErrorAsError="true" />

        <Message Importance="high" Text="--------- End of PACKAGE ---------"/>
  </Target>

  <!-- 5- Then Publish (but not for PR)-->
  <Target Name="Publish" DependsOnTargets="Package">
    <PropertyGroup>
      <PackageFileName>$(PackagesPath)\$(SolutionName).$(PrettyVersion).nupkg</PackageFileName>
    </PropertyGroup>
    <!--= Publish the package on Nuget-->
    <Message Importance="high" Text="--------- NUGET PUBLISH  -------------------------------------------"/>

    <Exec Command='"$(NuGetExePath)" setApiKey $(NugetKey) -source $(NugetFeed) -verbosity quiet' EchoOff='true' Condition="'$(NugetKey)'!='' AND '$(APPVEYOR_PULL_REQUEST_NUMBER)'==''"/>
    <Exec Command='"$(NuGetExePath)" push "$(PackageFileName)" -Source $(NugetFeed)' Condition="'$(NugetKey)'!='' AND '$(APPVEYOR_PULL_REQUEST_NUMBER)'==''"/>

    <Message Importance="high" Text="--------- end of NUGET PUBLISH  -------------------------------------"/>
  </Target>
  </Project>
                                                                                             